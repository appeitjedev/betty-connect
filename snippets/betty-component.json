{
  "Component": {
    "prefix": "bc",
    "body": [
      "(() => ({",
      "  name: '$1',",
      "  type: '${2|BODY_COMPONENT,LAYOUT_COMPONENT,CONTAINER_COMPONENT,CONTENT_COMPONENT|}',",
      "  allowedTypes: [],",
      "  orientation: '${3|HORIZONTAL,VERTICAL|}',",
      "  jsx: (() => {",
      "    const value = 'Example';",
      "    return <div className={classes.root}>{value}</div>;",
      "  })(),",
      "  styles: B => theme => {",
      "    const style = new B.Styling(theme);",
      "    return {",
      "      root: {},",
      "    };",
      "  },",
      "}))();"
    ],
    "description": "Component"
  },

  "Allowed types": {
    "scope": "javascript",
    "prefix": "bcType",
    "body": [
      "'${1|BODY_COMPONENT,LAYOUT_COMPONENT,CONTAINER_COMPONENT,CONTENT_COMPONENT|}'"
    ],
    "description": "Allowed types convention"
  },

  "B Deconstructor": {
    "prefix": "bcB",
    "body": ["const { $0} = B;"],
    "description": "B Deconstructor"
  },

  "isDev": {
    "prefix": "bcisDev",
    "body": ["const isDev = env === 'dev';", "$0"],
    "description": "isDev"
  },

  "isEmpty": {
    "prefix": "bcisEmpty",
    "body": ["const isEmpty = children.length === 0;", "$0"],
    "description": "isEmpty"
  },

  "B.Link": {
    "prefix": "bchLink",
    "body": ["<Link endpoint={$1}>$0</Link>"],
    "description": "B.Link"
  },

  "B.getProperty": {
    "prefix": "bchgetProperty",
    "body": ["const { kind, modelId, name } = getProperty($0);"],
    "description": "B.getProperty"
  },

  "B.GetAll": {
    "prefix": "bchGetAll",
    "body": [
      "<GetAll modelId={$1} filter={$2} skip={$3} take={$4}>",
      "  {({ loading, error, data, refetch }) => {",
      "    if (loading) {",
      "      return <span>Loading...</span>;",
      "    }",
      "",
      "    if (error) {",
      "      return <span>Something went wrong: {error.message} :(</span>;",
      "    }",
      "",
      "    const { totalCount, results } = data;",
      "",
      "    return (",
      "      <div>",
      "        <p>There are {totalCount} records.</p>",
      "        <ul>",
      "          {results.map(row => <li key={row.id}>{row.$5}</li>)}",
      "        </ul>",
      "      </div>",
      "    );",
      "  }}",
      "</GetAll>"
    ],
    "description": "B.GetAll"
  },

  "B.GetOne": {
    "prefix": "bchGetOne",
    "body": [
      "<GetOne modelId={$1} filter={$2}>",
      "  {({ loading, error, data }) => {",
      "    if (loading) {",
      "      return <span>Loading...</span>;",
      "    }",
      "",
      "    if (error) {",
      "      return <span>Something went wrong: {error.message} :(</span>;",
      "    }",
      "",
      "    const { id } = data;",
      "",
      "    return (",
      "      <div>",
      "        <p>Fetched a record with ID: {id}.</p>",
      "      </div>",
      "    );",
      "  }}",
      "</GetOne>"
    ],
    "description": "B.GetOne"
  },

  "B.GetMe": {
    "prefix": "bchGetMe",
    "body": [
      "<GetMe authenticationProfileId={$1}>",
      "  {({ loading, error, data }) => {",
      "    if (loading) {",
      "      return <span>Loading...</span>;",
      "    }",
      "",
      "    if (error) {",
      "      return <span>Something went wrong: {error.message} :(</span>;",
      "    }",
      "",
      "    const { id } = data;",
      "",
      "    return <p>Fetched a record with ID: {id}.</p>;",
      "  }}",
      "</GetMe>"
    ],
    "description": "B.GetMe"
  },

  "B.Action": {
    "prefix": "bchAction",
    "body": [
      "<Action actionId={$1}>",
      "  {(callAction, { loading, error, data }) => {",
      "    if (loading) {",
      "      return <span>Loading...</span>;",
      "    }",
      "",
      "    if (error) {",
      "      return <span>Something went wrong: {error.message} :(</span>;",
      "    }",
      "",
      "    return (",
      "      <button",
      "        onClick={event => {",
      "          callAction({",
      "            variables: { input: { id: id } },",
      "          });",
      "        }}",
      "      >",
      "        {useText(text)}",
      "      </button>",
      "    );",
      "  }}",
      "</Action>;"
    ],
    "description": "B.Action"
  }
}
